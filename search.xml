<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bean的装配方式(1)</title>
      <link href="/2019/03/05/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/03/05/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Bean的装配可以理解为将Bean依赖注入到Spring容器中，Bean的装配方式即Bean依赖注入的方式。下面我们来理解一下基于XML配置的装配和基于注释的装配。本节主要讲解前者.</p><h2 id="基于XML配置的装配"><a href="#基于XML配置的装配" class="headerlink" title="基于XML配置的装配"></a>基于XML配置的装配</h2><p>spring提供了两种基于XML配置的装配方式。一是使用构造方式注入，另外一个就是属性setter方法注入</p><p>注意：<br>使用构造方法注入方式装配Bean时，Bean的实现类必须要有带参数的构造函数。在配置文件中使用bean的子元素constructor-arg来定义构造函数的参数。</p><p>使用属性setter方法装配Bean时，Bean的实现类必须提供一个默认无参构造函数，并为需要的属性提供setter方法。需要使用bean的子元素property为每个属性注入值。</p><hr><p>下面我们来通过一个实例来演示基于XML配置的装配方式</p><p>首先创建ComplexUser类，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package assemble;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class ComplexUser &#123;</span><br><span class="line">private String uname;</span><br><span class="line">private List&lt;String&gt; hobblyList;</span><br><span class="line">private Map&lt;String, String&gt; residenceMap;</span><br><span class="line">private Set&lt;String&gt; aliasSet;</span><br><span class="line">private String[] array;</span><br><span class="line">public void setUname(String uname) &#123;</span><br><span class="line">this.uname = uname;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobblyList(List&lt;String&gt; hobblyList) &#123;</span><br><span class="line">this.hobblyList = hobblyList;</span><br><span class="line">&#125;</span><br><span class="line">public void setResidenceMap(Map&lt;String, String&gt; residenceMap) &#123;</span><br><span class="line">this.residenceMap = residenceMap;</span><br><span class="line">&#125;</span><br><span class="line">public void setAliasSet(Set&lt;String&gt; aliasSet) &#123;</span><br><span class="line">this.aliasSet = aliasSet;</span><br><span class="line">&#125;</span><br><span class="line">public void setArray(String[] array) &#123;</span><br><span class="line">this.array = array;</span><br><span class="line">&#125;</span><br><span class="line">public ComplexUser() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line">public ComplexUser(String uname, List&lt;String&gt; hobblyList, Map&lt;String, String&gt; residenceMap, Set&lt;String&gt; aliasSet,</span><br><span class="line">String[] array) &#123;</span><br><span class="line">super();</span><br><span class="line">this.uname = uname;</span><br><span class="line">this.hobblyList = hobblyList;</span><br><span class="line">this.residenceMap = residenceMap;</span><br><span class="line">this.aliasSet = aliasSet;</span><br><span class="line">this.array = array;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;ComplexUser [uname=&quot; + uname + &quot;, hobblyList=&quot; + hobblyList + &quot;, residenceMap=&quot; + residenceMap</span><br><span class="line">+ &quot;, aliasSet=&quot; + aliasSet + &quot;, array=&quot; + Arrays.toString(array) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接下来创建ComplexUserContext.xml配置文件,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">                        </span><br><span class="line">     &lt;!-- 使用构造方法注入方法装配ComplexUser实例user1 --&gt;</span><br><span class="line">     &lt;bean id=&quot;user1&quot; class=&quot;assemble.ComplexUser&quot;&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;0&quot; value=&quot;chenheng1&quot;/&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;1&quot; &gt;</span><br><span class="line">     &lt;list&gt;</span><br><span class="line">     &lt;value&gt;唱歌&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;跳舞&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;爬山&lt;/value&gt;</span><br><span class="line">     &lt;/list&gt;</span><br><span class="line">     &lt;/constructor-arg&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;2&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;dalian&quot; value=&quot;大连&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;beijing&quot; value=&quot;北京&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;shanghai&quot; value=&quot;上海&quot;/&gt;   </span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;3&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;陈恒 100&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 101&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 102&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;4&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;看书&lt;/value&gt;</span><br><span class="line">&lt;value&gt;学习&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 使用属性的setter方式注入装配ComplexUser 实例user2 --&gt;</span><br><span class="line">&lt;bean id=&quot;user2&quot; class=&quot;assemble.ComplexUser&quot;&gt;</span><br><span class="line">&lt;property name=&quot;uname&quot; value=&quot;chenheng2&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;hobblyList&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;看书&lt;/value&gt;</span><br><span class="line">&lt;value&gt;学习spring&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;residenceMap&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;shenzhen&quot; value=&quot;深圳&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;guangzhou&quot; value=&quot;广州&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;tianjin&quot; value=&quot;天津&quot;/&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;aliasSet&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;陈恒 103&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 104&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 105&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;array&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;cccccc&lt;/value&gt;</span><br><span class="line">&lt;value&gt;dddddd&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><hr><p>最后创建TestComplexUser类来测试使用两种方法的输出结果。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import assemble.ComplexUser;</span><br><span class="line"></span><br><span class="line">public class TestAssemble &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO 自动生成的方法存根</span><br><span class="line">ApplicationContext applicationContext=new ClassPathXmlApplicationContext(&quot;ComplexUserContext.xml&quot;);</span><br><span class="line">ComplexUser user1=(ComplexUser)applicationContext.getBean(&quot;user1&quot;);</span><br><span class="line">ComplexUser user2=(ComplexUser)applicationContext.getBean(&quot;user2&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(user1);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果可想而知</p><blockquote><blockquote><p>ComplexUser<br>[uname=chenheng1, hobblyList=[唱歌, 跳舞, 爬山], residenceMap={dalian=大连, beijing=北京, shanghai=上海}, aliasSet=[陈恒 100, 陈恒 101, 陈恒 102], array=[看书, 学习]]<br>ComplexUser<br>[uname=chenheng2, hobblyList=[看书, 学习spring], residenceMap={shenzhen=深圳, guangzhou=广州, tianjin=天津}, aliasSet=[陈恒 103, 陈恒 104, 陈恒 105], array=[cccccc, dddddd]]</p></blockquote></blockquote><hr><p>就这样我们完成了第一种Bean的装配方式。希望对大家有所帮助。对于第二种装配方式我将放到下节详解。</p><p><strong><em>参考书籍:  JavaEE框架整合开发入门到实践+SSM (清华大学出版社)</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andriod Studio无法打开虚拟机</title>
      <link href="/2019/03/03/Andriod-Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/03/03/Andriod-Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们都知道使用andriod studio都必须要有手机模拟器或者链接手机，才能让程序跑起来。</p><p>今天我第一次Run的时候出现了一个很无语的错误，模拟器也没有打开。</p><p>报错如下：</p><blockquote><p>Emulator: [5984]:ERROR:android/android-emu/android/qt/qt_setup.cpp:<br>28:Qtlibrary not found at D:\AndroidSDK\emulator\lib64\qt\li </p></blockquote><blockquote><p>Emulator: Could not launch ‘D:\AndroidSDK\emulator/qemu/windows-x86_64/<br>qemu-system-i386.exe’: No such file or directory</p></blockquote><blockquote><p>Emulator: Process finished with exit code 2</p></blockquote><p>错误原因是一个emulator文件夹的丢失，我最初也看不懂这个错误，在网上查了好久，一直都是说emulator文件夹丢失。解决方案就是复制博主的文件夹，然后粘贴就行了，但是很难找到粘贴的位置。</p><p>不过我在一个博客上看到了另一个答案，就是进去SDK Manager下载就可以了，完全不用知道要在哪个文件夹下。</p><p>如图：<br><img src="/img/Andriod-Studio无法打开虚拟机_img/SDK_Manager.png" alt></p><p>参考地址：<a href="https://blog.csdn.net/qq_38785971/article/details/82467174" target="_blank" rel="noopener">https://blog.csdn.net/qq_38785971/article/details/82467174</a></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Andriod Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNK2019问题</title>
      <link href="/2019/03/01/LNK2019%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/01/LNK2019%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index |首页摘要>今天在编译d3dx9的测试案例时被一个错误困扰了几个小时，说到底还是对vs编译器的不熟悉！<a id="more"></a><the rest of contents>对于这个问题在网上找了很久的错误，终于找到了令人满意的答案（因为该错误有点愚蠢，估计很少人会犯吧.</the></excerpt></p><p>##× 问题描述 ×</p><h3 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><p><img src="/img/LNK2019问题_img/Lnk2019_1.png" alt></p><p>WinMain函数是win32应用程序的入口点，而我创建的是窗口应用程序，却用着main入口函数。如果入口函数指定不当，就会报此错误</p><h3 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h3><p>同理如果选择的是win32控制台程序却用着winMain入口函数，则会报相同的lnk2019错误。<br><img src="/img/LNK2019问题_img/Lnk2019_2.png" alt></p><p>那么如何修改呢（当然可以重新删除项目，创建相对应的项目，不过有一点麻烦咯）</p><p>##× 解决方法 ×<br>首先进入项目属性，找到c/c++/预处理器，进入编辑定义。高亮部分由/分割<br>_CONSOLE和_WINDOWS。如图所示：<br><img src="/img/LNK2019问题_img/attribute_1.png" alt></p><p>前者是控制台程序用于MAIN入口函数，后者是窗体程序用于WINMAIN入口函数。选择其中一个就行。当然修改这一点还是不行的，还要修改子系统，如图对应修改就可以啦。</p><p><img src="/img/LNK2019问题_img/attribute_2.png" alt></p><p>参考地址：<a href="https://blog.csdn.net/luoyayun361/article/details/84403579" target="_blank" rel="noopener">https://blog.csdn.net/luoyayun361/article/details/84403579</a></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My frist Blog</title>
      <link href="/2019/02/27/My-frist-Blog/"/>
      <url>/2019/02/27/My-frist-Blog/</url>
      
        <content type="html"><![CDATA[<p>大三的时候，在学习期间，总是会遇到一系列的问题。无论是编程的bug还是编译环境的error，有时候还会遇到编译器问题等。每个问题几乎都会让我花费大量的时间在网上找个答案。结果第二次遇到相同问题的时候,结果又花费大量的时间去网上找解决方案，实属困难。所以我想将我遇到的难以解决的问题与解决方案一起发布成博客！</p><h2 id="加油！"><a href="#加油！" class="headerlink" title="加油！"></a>加油！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
