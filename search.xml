<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>archetype</title>
      <link href="/2020/01/16/archetype/"/>
      <url>/2020/01/16/archetype/</url>
      
        <content type="html"><![CDATA[<p>我们所知的maven工程大致有两种结构，一种就是单module工程，即一个项目中不含有父子工程，另一种就是多module工程，是区分父子工程的。此篇博客就是想详细讲解如何利用maven的archetype快速创建两种工程原型，包括我在创建的过程中遇见的种种问题。</p><hr><h3 id="自动生成archetype工程原型"><a href="#自动生成archetype工程原型" class="headerlink" title="自动生成archetype工程原型"></a>自动生成archetype工程原型</h3><p><strong>该方式适用于创建单module工程脚手架，快速简单高效。还可以修改一些配置文件，添加默认参数，文件夹命名等将下一节手动创建archetype详细讲解</strong></p><hr><ol><li>先利用IDE创建一个maven project。</li><li>在该project的根路径打开cmd，使用maven命令：<blockquote><p>mvn archetype:create-from-project</p></blockquote></li><li>执行完后进入target\generated-sources\archetype目录，打开cmd，使用maven命令:<blockquote><p>mvn install</p></blockquote></li><li>执行完上条命令后就可以直接使用下述maven命令，按照提示填写groupId、version、package等信息找到对应的脚手架，即可创建新的项目工程<blockquote><p>mvn archetype:generate -DarchetypeCatalog=local</p></blockquote></li><li>如果想要在IDE使用archetype创建项目，就需要使用下面的maven命令，将你创建的脚手架信息记录在repository/archetype-catalog.xml中<blockquote><p>mvn archetype:crawl</p></blockquote></li><li>如果想发布到公司的私有maven库里，首先在settings.xml配置文件中配置好公司私有库的信息，在使用下面的maven命令<blockquote><p>mvn deploy</p></blockquote></li></ol><p><strong>第3,5,6点都是target\generated-sources\archetype目录下操作</strong></p><hr><h3 id="手动创建archetype工程原型"><a href="#手动创建archetype工程原型" class="headerlink" title="手动创建archetype工程原型"></a>手动创建archetype工程原型</h3><p><strong>该方法将详细讲解如何创建多module工程脚手架</strong></p><hr><ol><li>先利用IDE创建一个maven project叫archetype工程。</li></ol><hr><ol start="2"><li>手动创建目录文件如下格式<br><img src="/img/archetype/archetype1.png" alt="目录详细截图"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:.</span><br><span class="line">│  pom.xml</span><br><span class="line">└─src</span><br><span class="line">    └─main</span><br><span class="line">        └─resources</span><br><span class="line">            ├─archetype-resources              //resources下创建该文件夹，包含父工程pom文件，内部信息之后详解</span><br><span class="line">            │  │  pom.xml</span><br><span class="line">            │  ├─__rootArtifactId__-api       // __rootArtifactId__(注意前后各两个下划线)为创建工程时父工程的ArtifactId，子工程项目名称为父工程ArtifactId+(自定义名称) pom文件也是按需填写，后面详解</span><br><span class="line">            │  │  │  pom.xml</span><br><span class="line">            │  │  └─src</span><br><span class="line">            │  │      └─main</span><br><span class="line">            │  │          └─java</span><br><span class="line">            │  │              ├─dto            //包名和空包问题后续详解  </span><br><span class="line">            │  ├─__rootArtifactId__-core</span><br><span class="line">            │  │  │  pom.xml</span><br><span class="line">            │  │  └─src</span><br><span class="line">            │  │      └─main</span><br><span class="line">            │  │          ├─java</span><br><span class="line">            │  │          │  └─service</span><br><span class="line">            │  │          │      └─impl       </span><br><span class="line">            │  │          └─resources                      </span><br><span class="line">            └─META-INF</span><br><span class="line">                └─maven</span><br><span class="line">                        archetype-metadata.xml //重点讲解</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="3"><li>父工程pom文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; </span><br><span class="line">&lt;groupId&gt;$&#123;groupId&#125;&lt;/groupId&gt;                       &lt;!-- $&#123;groudId&#125;由创建项目时输入的groudId值代替 无需更改--&gt;</span><br><span class="line">&lt;artifactId&gt;$&#123;artifactId&#125;&lt;/artifactId&gt;              &lt;!-- $&#123;artifactId&#125;由创建项目时输入的artifactId值代替 无需更改--&gt;</span><br><span class="line">&lt;version&gt;$&#123;version&#125;&lt;/version&gt;    &lt;!-- $&#123;version&#125;由创建项目时输入的version值代替 无需更改--&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;name&gt;beast-$&#123;artifactId&#125;&lt;/name&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;api.version&gt;$&#123;version&#125;&lt;/api.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;modules&gt;    &lt;!--modules标签里填写脚手架中所需要的所有子模块artifactId ，由$&#123;rootArtifactId&#125;（父工程ArtifactId，也就是创建项目时输入的artifactId值）+ 自定义--&gt;</span><br><span class="line">&lt;module&gt;$&#123;rootArtifactId&#125;-api&lt;/module&gt;</span><br><span class="line">&lt;module&gt;$&#123;rootArtifactId&#125;-dao&lt;/module&gt;</span><br><span class="line">&lt;module&gt;$&#123;rootArtifactId&#125;-core&lt;/module&gt;</span><br><span class="line">&lt;module&gt;$&#123;rootArtifactId&#125;-main&lt;/module&gt;</span><br><span class="line">&lt;module&gt;$&#123;rootArtifactId&#125;-mybatisGen&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="4"><li>子工程pom文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;$&#123;artifactId&#125;&lt;/artifactId&gt;               &lt;!--无需parent标签，会自动生成。 该$&#123;artifactId&#125; 会在创建项目后由父工程pom文件中的modules标签根据子工程文件名来代替，无需更改--&gt;</span><br><span class="line">&lt;name&gt;$&#123;appName&#125;-$&#123;artifactId&#125;&lt;/name&gt;</span><br><span class="line">&lt;!--如果子模块间需要相互引用 ，则需添加以下依赖。只需要修改artifactId，该值为父工程中modules中需要依赖的模块的module值--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;$&#123;groupId&#125;&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;$&#123;rootArtifactId&#125;-api&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="5"><li>archetype-metadata.xml<br>如何在利用脚手架创建工程时根据自己的需求自动创建文件，文件夹，空包都是在该配置文件里修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;requiredProperties&gt;                                &lt;!--该标签里定义一些自定义参数，可以通过$&#123;&#125;来获取具体值，可以设定默认值，也可以通过创建项目的时候填写对应的值--&gt;</span><br><span class="line">&lt;requiredProperty key=&quot;appName&quot;&gt;</span><br><span class="line">            &lt;defaultValue&gt;epay&lt;/defaultValue&gt;</span><br><span class="line">        &lt;/requiredProperty&gt;</span><br><span class="line">&lt;/requiredProperties&gt;</span><br><span class="line">&lt;!--module 模块定义   name:The module&apos;s name(父工程pom文件的modules对应的module值). id:The module&apos;s artifactId.(同name). dir:The module&apos;s directory.(创建子工程的文件夹名称) --&gt;</span><br><span class="line">&lt;!--fileSet 文件集定义 filtered:Filesets can be filtered, which means the selected files will be used as Velocity templates. They can be non-filtered, which means the selected files will be copied without modification.  encoding: 文件编码  .   packaged:Filesets can be packaged, which means the selected files will be generated/copied in a directory structure that is prepended by the package property. They can be non-packaged, which means that the selected files will be generated/copied without that prepend.--&gt;</span><br><span class="line">&lt;!--directory 目录 创建子项目必须生成的目录路径--&gt;</span><br><span class="line">&lt;!--includes 可以利用正则表达式来生成特定的后缀文件或者空包--&gt;</span><br><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module id=&quot;$&#123;rootArtifactId&#125;-api&quot; name=&quot;$&#123;rootArtifactId&#125;-api&quot;</span><br><span class="line">dir=&quot;__rootArtifactId__-api&quot;&gt;</span><br><span class="line">&lt;fileSets&gt;         </span><br><span class="line">&lt;fileSet filtered=&quot;true&quot; encoding=&quot;UTF-8&quot; packaged=&quot;true&quot;&gt;</span><br><span class="line">&lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/**&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;/fileSet&gt;</span><br><span class="line"></span><br><span class="line">&lt;fileSet encoding=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/**&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;/fileSet&gt;</span><br><span class="line">&lt;/fileSets&gt;</span><br><span class="line">&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>当include标签下的值为上面案例一样则代表，该目录下可以生成任意文件文件夹包括空包,但是这样还是没有解决生成空包问题</strong></p><hr><ol start="6"><li>包名问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">            │  ├─__rootArtifactId__-api       </span><br><span class="line">            │  │  │  pom.xml</span><br><span class="line">            │  │  └─src</span><br><span class="line">            │  │      └─main</span><br><span class="line">            │  │          └─java            </span><br><span class="line">&lt;!--包名，在创建项目时，可以设置package名称，这个package名称对于所有子工程的都是相同的，而且会在java文件夹下自动创建该包名的所有文件夹，所以!--&gt;</span><br><span class="line">&lt;!--我们只需要在java文件夹下创建每个子工程特定的文件夹，也可以先创建以$&#123;ArtifactId&#125;自定义部分的值命名的文件夹，在创建各个部分的文件夹--&gt;</span><br><span class="line">            │  │              ├─dto  </span><br><span class="line">&lt;!--当然如果有类也需要创建的话，必须设置package，如下：--&gt;</span><br><span class="line">#set( $symbol_pound = &apos;#&apos; )</span><br><span class="line">#set( $symbol_dollar = &apos;$&apos; )</span><br><span class="line">#set( $symbol_escape = &apos;\&apos; )</span><br><span class="line">package $&#123;package&#125;.*;    &lt;!--\*代表该类所在Java文件夹下自己创建的文件夹路径--&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="7"><li>空包问题<br>我们创建的项目中大部分的项目文件格式都差不多，所以就想连空包名也一起自动生成。当然这也是可以的<br>首先先修改archetype-metadata.xml文件 <strong>步骤5中有提到</strong><br>其次需要在父工程和archetype工程的pom文件中添加插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;includeEmptyDirs&gt;true&lt;/includeEmptyDirs&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="8"><li>打包问题<br>手动创建archetype工程无需使用mvn archetype:create-from-project命令<br>在archetype工程根目录下使用mvn clean install命令，生成好后进入target目录直接 使用mvn archetype:crawl注册到repository/archetype-catalog.xml中。<br>如果想到发布到公司私服，就在target目录下按照第一个方法的步骤6命令就可以了。</li></ol><p><strong><em>参考地址：<a href="https://www.cnblogs.com/felixpan/p/5910598.html" target="_blank" rel="noopener">https://www.cnblogs.com/felixpan/p/5910598.html</a></em></strong><br><strong><em>参考地址：<a href="http://maven.apache.org/archetype/archetype-models/archetype-descriptor/archetype-descriptor.html" target="_blank" rel="noopener">http://maven.apache.org/archetype/archetype-models/archetype-descriptor/archetype-descriptor.html</a></em></strong><br><strong><em>参考地址：<a href="https://blog.csdn.net/LoveJavaYDJ/article/details/86606397" target="_blank" rel="noopener">https://blog.csdn.net/LoveJavaYDJ/article/details/86606397</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> maven脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven_archetype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>face_identify</title>
      <link href="/2019/06/18/face-identify/"/>
      <url>/2019/06/18/face-identify/</url>
      
        <content type="html"><![CDATA[<p>某一天，我突然想起想做一个人脸识别的登录系统，可以用在以后的作业当中。嘿嘿嘿，这小算盘还是可以的吧。于是我撸起袖子就做了起来，到处查找资料(实在不想写人脸识别算法…哈哈哈哈，其实是不会写)。也没有找多久，就发现了一个百度云的人脸识别API，所以我也不废话了，开始正式步骤。</p><h3 id="API列表"><a href="#API列表" class="headerlink" title="API列表"></a>API列表</h3><p>百度云人脸识别API有如下几个</p><table><thead><tr><th style="text-align:left">API</th><th style="text-align:center">状态</th><th>请求地址</th><th>调用量限制</th><th>QPS限制</th></tr></thead><tbody><tr><td style="text-align:left">人脸检测</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/detect" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/detect</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">在线活体检测</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceverify" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceverify</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">h5语音验证码</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v1/faceliveness/sessioncode" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v1/faceliveness/sessioncode</a></td><td>50次/天免费</td><td>2</td></tr><tr><td style="text-align:left">h5活体视频分析</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v1/faceliveness/verify" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v1/faceliveness/verify</a></td><td>50次/天免费</td><td>2</td></tr><tr><td style="text-align:left">人脸对比</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/match" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/match</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸搜索</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/search" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/search</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-人脸注册</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-人脸更新</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/update" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/update</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-删除用户</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/delete" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/delete</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-用户信息查询</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/get" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/get</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-获取组列表</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/getlist" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/getlist</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-获取用户列表</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/getusers" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/getusers</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-复制用户</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/copy" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/copy</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-获取用户人脸列表</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/face/getlist" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/face/getlist</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-创建用户组</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/add" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/add</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-删除用户组</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/delete" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/delete</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸库管理-删除人脸</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/faceset/face/delete" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/faceset/face/delete</a></td><td>无限制</td><td>2</td></tr><tr><td style="text-align:left">人脸搜索-M:N识别</td><td style="text-align:center">免费使用</td><td><a href="https://aip.baidubce.com/rest/2.0/face/v3/multi-search" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/face/v3/multi-search</a></td><td>无限制</td><td>5</td></tr></tbody></table><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>我使用的是IDEA编译器，直接创建了一个springboot项目，设置好相关的maven依赖。这样还不完善，还要进入到pom.xml文件添加如下依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.baidu.aip/java-sdk --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baidu.aip&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-sdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.google.gson/gson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>这样一个一个最基本的face_identify项目已经建好了</p><h3 id="添加相关的百度java文件"><a href="#添加相关的百度java文件" class="headerlink" title="添加相关的百度java文件"></a>添加相关的百度java文件</h3><p>请分别下载下面的java文件，并导入已经创建好的face_identify项目中<br><a href="https://ai.baidu.com/file/658A35ABAB2D404FBF903F64D47C1F72" target="_blank" rel="noopener">FileUtil.java</a><br><a href="https://ai.baidu.com/file/C8D81F3301E24D2892968F09AE1AD6E2" target="_blank" rel="noopener">Base64Util.java</a><br><a href="https://ai.baidu.com/file/544D677F5D4E4F17B4122FBD60DB82B3" target="_blank" rel="noopener">HttpUtil.java</a><br><a href="https://ai.baidu.com/file/470B3ACCA3FE43788B5A963BF0B625F3" target="_blank" rel="noopener">GsonUtils.java</a></p><h3 id="百度云相关操作"><a href="#百度云相关操作" class="headerlink" title="百度云相关操作"></a>百度云相关操作</h3><p>首先登录百度云，找到人脸识别服务<br><img src="/img/face-identify/baiduyun1.png" alt><br>新建自己的项目，为这个项目设置相关的人脸库</p><hr><p>人脸库有一些属性，用户组，用户ID，用户信息等等<strong>需要记住，每次请求获取返回数据的时候可能需要</strong><br><img src="/img/face-identify/baiduyun2.png" alt></p><p><strong>关于人脸库的设置限制</strong></p><blockquote><p>每个开发者账号可以创建100个appid；<br>每个appid对应一个人脸库，且不同appid之间，人脸库互不相通；<br>每个人脸库下，可以创建多个用户组，用户组（group）数量没有限制；<br>每个用户组（group）下，可添加最多无限张人脸，无限个uid；<br>每个用户（uid）所能注册的最大人脸数量没有限制；</p></blockquote><h3 id="查看百度云FACE文档"><a href="#查看百度云FACE文档" class="headerlink" title="查看百度云FACE文档"></a>查看百度云FACE文档</h3><p>对于百度云人脸识别API的调用，有一个详细介绍的文档，不过这个文档现在还是V2级别的，相对于现在来说有点老了，有兴趣的可以点击链接下载<br><a href="https://bce-cdn.bj.bcebos.com/doc/pdf/FACE.zh.pdf?timeStamp=1560910176383" target="_blank" rel="noopener">https://bce-cdn.bj.bcebos.com/doc/pdf/FACE.zh.pdf?timeStamp=1560910176383</a></p><p>我们想要使用百度人脸识别API，必须先要发送请求，获取结果。在技术文档中讲到了两种请求方式,这里只讲解一种</p><h3 id="请求URL数据格式"><a href="#请求URL数据格式" class="headerlink" title="请求URL数据格式"></a>请求URL数据格式</h3><p>向API服务地址使用POST发送请求，必须在URL中带上参数：<br>access_token: 必须参数，参考“AccessToken获取”。</p><blockquote><p>String results = HttpUtil.post(url, accessToken, “application/json”, param);</p></blockquote><hr><p><strong>“application/json”</strong><br>返回的数据为json数据</p><hr><p><strong>URL：</strong><br>根据自己的需求使用不同的url地址。</p><hr><p><strong>获取accessToken：</strong></p><p>向授权服务地址https: [//aip.baidubce.com/oauth/2.0/token] 发送请求（推荐使用POST），并在URL中带上以下参数：</p><p>grant_type： 必须参数，固定为client_credentials；<br>client_id： 必须参数，应用的API Key；<br>client_secret： 必须参数，应用的Secret Key；</p><p><img src="/img/face-identify/baiduyun3.png" alt></p><p>java示例代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.baidu.ai.aip.auth;</span><br><span class="line"></span><br><span class="line">import org.json.JSONObject;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取token类</span><br><span class="line"> */</span><br><span class="line">public class AuthService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取权限token</span><br><span class="line">     * @return 返回示例：</span><br><span class="line">     * &#123;</span><br><span class="line">     * &quot;access_token&quot;: &quot;24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567&quot;,</span><br><span class="line">     * &quot;expires_in&quot;: 2592000</span><br><span class="line">     * &#125;</span><br><span class="line">     */</span><br><span class="line">    public static String getAuth() &#123;</span><br><span class="line">        // 官网获取的 API Key 更新为你注册的</span><br><span class="line">        String clientId = &quot;百度云应用的AK&quot;;</span><br><span class="line">        // 官网获取的 Secret Key 更新为你注册的</span><br><span class="line">        String clientSecret = &quot;百度云应用的SK&quot;;</span><br><span class="line">        return getAuth(clientId, clientSecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取API访问token</span><br><span class="line">     * 该token有一定的有效期，需要自行管理，当失效时需重新获取.</span><br><span class="line">     * @param ak - 百度云官网获取的 API Key</span><br><span class="line">     * @param sk - 百度云官网获取的 Securet Key</span><br><span class="line">     * @return assess_token 示例：</span><br><span class="line">     * &quot;24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567&quot;</span><br><span class="line">     */</span><br><span class="line">    public static String getAuth(String ak, String sk) &#123;</span><br><span class="line">        // 获取token地址</span><br><span class="line">        String authHost = &quot;https://aip.baidubce.com/oauth/2.0/token?&quot;;</span><br><span class="line">        String getAccessTokenUrl = authHost</span><br><span class="line">                // 1. grant_type为固定参数</span><br><span class="line">                + &quot;grant_type=client_credentials&quot;</span><br><span class="line">                // 2. 官网获取的 API Key</span><br><span class="line">                + &quot;&amp;client_id=&quot; + ak</span><br><span class="line">                // 3. 官网获取的 Secret Key</span><br><span class="line">                + &quot;&amp;client_secret=&quot; + sk;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL realUrl = new URL(getAccessTokenUrl);</span><br><span class="line">            // 打开和URL之间的连接</span><br><span class="line">            HttpURLConnection connection = (HttpURLConnection) realUrl.openConnection();</span><br><span class="line">            connection.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">            connection.connect();</span><br><span class="line">            // 获取所有响应头字段</span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();</span><br><span class="line">            // 遍历所有的响应头字段</span><br><span class="line">            for (String key : map.keySet()) &#123;</span><br><span class="line">                System.err.println(key + &quot;---&gt;&quot; + map.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            // 定义 BufferedReader输入流来读取URL的响应</span><br><span class="line">            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class="line">            String result = &quot;&quot;;</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = in.readLine()) != null) &#123;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">            /**</span><br><span class="line">             * 返回结果示例</span><br><span class="line">             */</span><br><span class="line">            System.err.println(&quot;result:&quot; + result);</span><br><span class="line">            JSONObject jsonObject = new JSONObject(result);</span><br><span class="line">            String access_token = jsonObject.getString(&quot;access_token&quot;);</span><br><span class="line">            return access_token;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.err.printf(&quot;获取token失败！&quot;);</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>param参数：</strong><br>一个String，详细请看技术文档对应的API的文档，不做过多解释</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下节详谈</p><p><strong><em>参考链接<a href="https://www.cnblogs.com/LiuFqiang/p/10846973.html" target="_blank" rel="noopener">https://www.cnblogs.com/LiuFqiang/p/10846973.html</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 百度人脸识别demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>face_identify2</title>
      <link href="/2019/06/18/face-identify2/"/>
      <url>/2019/06/18/face-identify2/</url>
      
        <content type="html"><![CDATA[<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面我们来看看几个实例吧</p><h3 id="人脸注册"><a href="#人脸注册" class="headerlink" title="人脸注册"></a>人脸注册</h3><p>人脸注册，也就是上传图片信息到人脸库中</p><p><strong>param参数：</strong></p><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:center">是否必选</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">image</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>图片信息(总数据大小应小于10M)，图片上传方式根据image_type来判断。注：组内每个uid下的人脸图片数目上限为20张</td></tr><tr><td style="text-align:left">image_type</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>图片类型 BASE64:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；URL:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)；FACE_TOKEN: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个</td></tr><tr><td style="text-align:left">group_id</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>用户组id（由数字、字母、下划线组成），长度限制128B</td></tr><tr><td style="text-align:left">user_id</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>用户id（由数字、字母、下划线组成），长度限制128B</td></tr><tr><td style="text-align:left">user_info</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>用户资料，长度限制256B</td></tr><tr><td style="text-align:left">quality_control</td><td style="text-align:center">否</td><td>String</td><td>NONE</td><td>图片质量控制 NONE: 不进行控制 LOW:较低的质量要求 NORMAL: 一般的质量要求 HIGH: 较高的质量要求 默认 NONE</td></tr><tr><td style="text-align:left">liveness_control</td><td style="text-align:center">否</td><td>String</td><td>NONE</td><td>活体检测控制 NONE: 不进行控制 LOW:较低的活体要求(高通过率 低攻击拒绝率) NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率) HIGH: 较高的活体要求(高攻击拒绝率 低通过率) 默认NONE</td></tr><tr><td style="text-align:left">action_type</td><td style="text-align:center">否</td><td>String</td><td>APPEND</td><td>操作方式 APPEND: 当user_id在库中已经存在时，对此user_id重复注册时，新注册的图片默认会追加到该user_id下,REPLACE : 当对此user_id重复注册时,则会用新图替换库中该user_id下所有图片,默认使用APPEND</td></tr></tbody></table><p><strong>java代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.yzctest.face.tool.face;</span><br><span class="line"></span><br><span class="line">import com.yzctest.face.tool.Auth;</span><br><span class="line">import com.yzctest.face.tool.GsonUtils;</span><br><span class="line">import com.yzctest.face.tool.HttpUtil;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class FaceAdd &#123;</span><br><span class="line"></span><br><span class="line">    ///传进来的参数是图片的BASE64数据形式</span><br><span class="line">    public static boolean add(Integer uid,String image)</span><br><span class="line">    &#123;</span><br><span class="line">        String url=&quot;https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add&quot;;</span><br><span class="line">        try&#123;</span><br><span class="line">            Map&lt;String,String&gt; options=new HashMap&lt;&gt;();</span><br><span class="line">            options.put(&quot;image&quot;,image);</span><br><span class="line">            options.put(&quot;image_type&quot;,&quot;BASE64&quot;);</span><br><span class="line">            options.put(&quot;user_id&quot;,uid.toString());</span><br><span class="line">            options.put(&quot;group_id&quot;,&quot;Face_Login&quot;);</span><br><span class="line"></span><br><span class="line">            String param = GsonUtils.toJson(options);</span><br><span class="line">            Auth auth=new Auth();</span><br><span class="line">            String accessToken = auth.getAuth();</span><br><span class="line"></span><br><span class="line">            String results = HttpUtil.post(url, accessToken, &quot;application/json&quot;, param);</span><br><span class="line">            String result=results.split(&quot;,&quot;)[5];</span><br><span class="line">            if(result==null)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>返回的参数列表</strong></p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:center">必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">log_id</td><td style="text-align:center">是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr><tr><td style="text-align:left">face_token</td><td style="text-align:center">是</td><td>string</td><td>人脸图片的唯一标识</td></tr><tr><td style="text-align:left">location</td><td style="text-align:center">是</td><td>array</td><td>人脸在图片中的位置</td></tr></tbody></table><p><strong>返回实例：</strong></p><blockquote><p>{<br>  “face_token”: “2fa64a88a9d5118916f9a303782a97d3”,<br>  “location”: {<br>      “left”: 117,<br>      “top”: 131,<br>      “width”: 172,<br>      “height”: 170,<br>      “rotation”: 4<br>  }<br>}</p></blockquote><h3 id="人脸检测"><a href="#人脸检测" class="headerlink" title="人脸检测"></a>人脸检测</h3><p>检测上传的照片中是否含有人脸</p><p><strong>param参数列表</strong></p><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:center">是否必选</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">image</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>图片信息(总数据大小应小于10M)，图片上传方式根据image_type来判断</td></tr><tr><td style="text-align:left">image_type</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>图片类型 BASE64:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；URL:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)；FACE_TOKEN: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个</td></tr><tr><td style="text-align:left">face_field</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>包括age,beauty,expression,face_shape,gender,glasses,landmark,landmark72,landmark150，race,quality,eye_status,emotion,face_type信息逗号分隔. 默认只返回face_token、人脸框、概率和旋转角度</td></tr><tr><td style="text-align:left">max_face_num</td><td style="text-align:center">否</td><td>String</td><td>1</td><td>最多处理人脸的数目，默认值为1，仅检测图片中面积最大的那个人脸；最大值10，检测图片中面积最大的几张人脸。</td></tr><tr><td style="text-align:left">face_type</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>人脸的类型 LIVE表示生活照：通常为手机、相机拍摄的人像图片、或从网络获取的人像图片等IDCARD表示身份证芯片照：二代身份证内置芯片中的人像照片 WATERMARK表示带水印证件照：一般为带水印的小图，如公安网小图 CERT表示证件照片：如拍摄的身份证、工卡、护照、学生证等证件图片 默认LIVE</td></tr><tr><td style="text-align:left">liveness_control</td><td style="text-align:center">否</td><td>String</td><td>NONE</td><td>活体检测控制 NONE: 不进行控制 LOW:较低的活体要求(高通过率 低攻击拒绝率) NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率) HIGH: 较高的活体要求(高攻击拒绝率 低通过率) 默认NONE</td></tr></tbody></table><p><strong>java代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.yzctest.face.tool.face;</span><br><span class="line"></span><br><span class="line">import com.yzctest.face.tool.Auth;</span><br><span class="line">import com.yzctest.face.tool.GsonUtils;</span><br><span class="line">import com.yzctest.face.tool.HttpUtil;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class FaceDetect &#123;</span><br><span class="line"></span><br><span class="line">    ///传进来的参数是图片的BASE64数据形式</span><br><span class="line">    public static String detect(String image)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        //百度人脸识别API</span><br><span class="line">        String url=&quot;https://aip.baidubce.com/rest/2.0/face/v3/detect&quot;;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            Map&lt;String,String&gt; options=new HashMap&lt;String,String&gt;();</span><br><span class="line">            options.put(&quot;image&quot;,image);</span><br><span class="line">            options.put(&quot;max_face_num&quot;,&quot;2&quot;);</span><br><span class="line">            options.put(&quot;image_type&quot;, &quot;BASE64&quot;);</span><br><span class="line">            String param = GsonUtils.toJson(options);</span><br><span class="line"></span><br><span class="line">            Auth auth = new Auth();</span><br><span class="line">            String accessToken = auth.getAuth();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            //以百度云文档调用方式1 以URL方式请求，必须获取access_Token,param,字符串的参数</span><br><span class="line">            String results = HttpUtil.post(url, accessToken, &quot;application/json&quot;, param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String result=results.split(&quot;,&quot;)[5];</span><br><span class="line">            String people=&quot;0&quot;;</span><br><span class="line">            if(result!=null)</span><br><span class="line">            &#123;</span><br><span class="line">                people=result.split(&quot;:&quot;)[2];</span><br><span class="line">            &#125;</span><br><span class="line">            return people;</span><br><span class="line"></span><br><span class="line">        &#125;catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>返回的参数列表</strong></p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:center">必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">face_num</td><td style="text-align:center">是</td><td>int</td><td>检测到的图片中的人脸数量</td></tr><tr><td style="text-align:left">face_list</td><td style="text-align:center">是</td><td>array</td><td>人脸信息列表，具体包含的参数参考下面的列表。(官网javaSDK V3查看)</td></tr></tbody></table><p><strong>返回实例</strong></p><blockquote><p>{<br>  “face_num”: 1,<br>  “face_list”: [{}]<br>}</p></blockquote><h3 id="人脸对比"><a href="#人脸对比" class="headerlink" title="人脸对比"></a>人脸对比</h3><p>给出两张照片的相似程度</p><p><strong>param参数</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:center">必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">image</td><td style="text-align:center">是</td><td>string</td><td>图片信息(总数据大小应小于10M)，图片上传方式根据image_type来判断。 两张图片通过json格式上传，格式参考表格下方示例</td></tr><tr><td style="text-align:left">image_type</td><td style="text-align:center">是</td><td>string</td><td>图片类型 BASE64:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；URL:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)；FACE_TOKEN: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个。</td></tr><tr><td style="text-align:left">face_type</td><td style="text-align:center">否</td><td>string</td><td>人脸的类型 LIVE表示生活照：通常为手机、相机拍摄的人像图片、或从网络获取的人像图片等，IDCARD表示身份证芯片照：二代身份证内置芯片中的人像照片， WATERMARK表示带水印证件照：一般为带水印的小图，如公安网小图 CERT表示证件照片：如拍摄的身份证、工卡、护照、学生证等证件图片 默认LIVE</td></tr><tr><td style="text-align:left">quality_control</td><td style="text-align:center">否</td><td>string</td><td>图片质量控制 NONE: 不进行控制 LOW:较低的质量要求 NORMAL: 一般的质量要求 HIGH: 较高的质量要求 默认 NONE</td></tr><tr><td style="text-align:left">liveness_control</td><td style="text-align:center">否</td><td>string</td><td>活体检测控制 NONE: 不进行控制 LOW:较低的活体要求(高通过率 低攻击拒绝率) NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率) HIGH: 较高的活体要求(高攻击拒绝率 低通过率) 默认NONE</td></tr></tbody></table><p><strong>java代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.yzctest.face.tool.face;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.yzctest.face.tool.*;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class FaceMatch &#123;</span><br><span class="line"></span><br><span class="line">    ///传进来的参数是图片的BASE64数据形式</span><br><span class="line">    public static String match(String image1) &#123;</span><br><span class="line">        // 请求url</span><br><span class="line">        String url = &quot;https://aip.baidubce.com/rest/2.0/face/v3/match&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            //byte[] bytes1 = FileUtil.readFileByBytes(image1Path);</span><br><span class="line">            byte[] bytes2 = FileUtil.readFileByBytes(&quot;./picture/1.jpg&quot;);</span><br><span class="line">            //String image1 = Base64Util.encode(bytes1);</span><br><span class="line">            String image2 = Base64Util.encode(bytes2);</span><br><span class="line"></span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; images = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; map1 = new HashMap&lt;&gt;();</span><br><span class="line">            map1.put(&quot;image&quot;, image1);</span><br><span class="line">            map1.put(&quot;image_type&quot;, &quot;BASE64&quot;);</span><br><span class="line">            map1.put(&quot;face_type&quot;, &quot;LIVE&quot;);</span><br><span class="line">            map1.put(&quot;quality_control&quot;, &quot;LOW&quot;);</span><br><span class="line">            map1.put(&quot;liveness_control&quot;, &quot;NORMAL&quot;);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; map2 = new HashMap&lt;&gt;();</span><br><span class="line">            map2.put(&quot;image&quot;, image2);</span><br><span class="line">            map2.put(&quot;image_type&quot;, &quot;BASE64&quot;);</span><br><span class="line">            map2.put(&quot;face_type&quot;, &quot;LIVE&quot;);</span><br><span class="line">            map2.put(&quot;quality_control&quot;, &quot;LOW&quot;);</span><br><span class="line">            map2.put(&quot;liveness_control&quot;, &quot;NORMAL&quot;);</span><br><span class="line"></span><br><span class="line">            images.add(map1);</span><br><span class="line">            images.add(map2);</span><br><span class="line"></span><br><span class="line">            String param = GsonUtils.toJson(images);</span><br><span class="line">            Auth auth = new Auth();</span><br><span class="line">            String accessToken = auth.getAuth();</span><br><span class="line">            // 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String results = HttpUtil.post(url, accessToken, &quot;application/json&quot;, param);</span><br><span class="line">            String result = results.split(&quot;,&quot;)[5];</span><br><span class="line">            String score=&quot;0&quot;;</span><br><span class="line">            if (result != null)</span><br><span class="line">            &#123;</span><br><span class="line">                score=result.split(&quot;:&quot;)[2];</span><br><span class="line">            &#125;</span><br><span class="line">            return score;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回参数列表</strong></p><p>参数名|必选|类型|说明<br>score|是|float|人脸相似度得分<br>face_list|是|array|人脸信息列表<br>+face_token|是|string|人脸的唯一标志</p><p><strong>返回实例</strong></p><blockquote><p>{<br>  “score”: 44.3,<br>  “face_list”: [  //返回的顺序与传入的顺序保持一致<br>      {<br>          “face_token”: “fid1”<br>      },<br>      {<br>          “face_token”: “fid2”<br>      }<br>  ]<br>}</p></blockquote><h3 id="人脸搜索"><a href="#人脸搜索" class="headerlink" title="人脸搜索"></a>人脸搜索</h3><p>通过一张图片，从人脸库中寻找相似度最高的人脸，并返回信息</p><p><strong>param参数</strong></p><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:center">是否必选</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">image</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>图片信息(总数据大小应小于10M)，图片上传方式根据image_type来判断</td></tr><tr><td style="text-align:left">image_type</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>图片类型 BASE64:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；URL:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)；FACE_TOKEN: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个</td></tr><tr><td style="text-align:left">group_id_list</td><td style="text-align:center">是</td><td>String</td><td>&nbsp;</td><td>从指定的group中进行查找 用逗号分隔，上限20个</td></tr><tr><td style="text-align:left">max_face_num</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>最多处理人脸的数目默认值为1(仅检测图片中面积最大的那个人脸) 最大值10</td></tr><tr><td style="text-align:left">match_threshold</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>匹配阈值（设置阈值后，score低于此阈值的用户信息将不会返回） 最大100 最小0 默认80 此阈值设置得越高，检索速度将会越快，推荐使用默认阈值80</td></tr><tr><td style="text-align:left">quality_control</td><td style="text-align:center">否</td><td>String</td><td>NONE</td><td>图片质量控制 NONE: 不进行控制 LOW:较低的质量要求 NORMAL: 一般的质量要求 HIGH: 较高的质量要求 默认 NONE</td></tr><tr><td style="text-align:left">liveness_control</td><td style="text-align:center">否</td><td>String</td><td>NONE</td><td>活体检测控制 NONE: 不进行控制 LOW:较低的活体要求(高通过率 低攻击拒绝率) NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率) HIGH: 较高的活体要求(高攻击拒绝率 低通过率) 默认NONE</td></tr><tr><td style="text-align:left">user_id</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>当需要对特定用户进行比对时，指定user_id进行比对。即人脸认证功能。</td></tr><tr><td style="text-align:left">max_user_num</td><td style="text-align:center">否</td><td>String</td><td>&nbsp;</td><td>查找后返回的用户数量。返回相似度最高的几个用户，默认为1，最多返回50个。</td></tr></tbody></table><p><strong>java代码实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.yzctest.face.tool.face;</span><br><span class="line"></span><br><span class="line">import com.yzctest.face.tool.Auth;</span><br><span class="line">import com.yzctest.face.tool.GsonUtils;</span><br><span class="line">import com.yzctest.face.tool.HttpUtil;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class FaceSearch &#123;</span><br><span class="line"></span><br><span class="line">    ///传进来的参数是图片的BASE64数据形式</span><br><span class="line">    public static String FaceSearch(String image)</span><br><span class="line">    &#123;</span><br><span class="line">        String url=&quot;https://aip.baidubce.com/rest/2.0/face/v3/search&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">            map.put(&quot;image&quot;, image); //图片base64数据</span><br><span class="line">            map.put(&quot;liveness_control&quot;, &quot;NORMAL&quot;);  //活体检测控制一般的</span><br><span class="line">            map.put(&quot;group_id_list&quot;, &quot;Face_Login&quot;);  //指定用户组group 人脸库总已经存在的用户组</span><br><span class="line">            map.put(&quot;image_type&quot;, &quot;BASE64&quot;);     //图片类型，这里转化过的base64</span><br><span class="line">            map.put(&quot;quality_control&quot;, &quot;LOW&quot;);   //图片质量控制</span><br><span class="line"></span><br><span class="line">            String param = GsonUtils.toJson(map);</span><br><span class="line">            Auth auth = new Auth();</span><br><span class="line">            String accessToken = auth.getAuth();</span><br><span class="line">            // 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span><br><span class="line"></span><br><span class="line">            String results = HttpUtil.post(url, accessToken, &quot;application/json&quot;, param);</span><br><span class="line">            return results;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回的参数列表</strong></p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:center">必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">face_token</td><td style="text-align:center">是</td><td>string</td><td>人脸标志</td></tr><tr><td style="text-align:left">user_list</td><td style="text-align:center">是</td><td>array</td><td>匹配的用户信息列表</td></tr><tr><td style="text-align:left">+group_id</td><td style="text-align:center">是</td><td>string</td><td>用户所属的group_id</td></tr><tr><td style="text-align:left">+user_id</td><td style="text-align:center">是</td><td>string</td><td>用户的user_id</td></tr><tr><td style="text-align:left">+user_info</td><td style="text-align:center">是</td><td>string</td><td>注册用户时携带的user_info</td></tr><tr><td style="text-align:left">+score</td><td style="text-align:center">是</td><td>float</td><td>用户的匹配得分</td></tr></tbody></table><p><strong>返回实例</strong></p><blockquote><p>{<br>  “face_token”: “fid”,<br>  “user_list”: [<br>     {<br>        “group_id” : “test1”,<br>        “user_id”: “u333333”,<br>        “user_info”: “Test User”,<br>        “score”: 99.3<br>    }<br>  ]<br>}</p></blockquote><p><strong><em>参考链接<a href="https://www.cnblogs.com/LiuFqiang/p/10846973.html" target="_blank" rel="noopener">https://www.cnblogs.com/LiuFqiang/p/10846973.html</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 百度人脸识别demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql报警告</title>
      <link href="/2019/03/10/Mysql%E6%8A%A5%E8%AD%A6%E5%91%8A/"/>
      <url>/2019/03/10/Mysql%E6%8A%A5%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>具体警告如下</strong>:</p><blockquote><p>Sun Mar 10 21:12:42 CST 2019 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</p></blockquote><p>产生此错误的原因是MySQL在高版本需要指明是否进行SSL连接<br><strong><em>对于什么是SSL，可以参考链接<a href="https://www.digicert.com/ssl/" target="_blank" rel="noopener">https://www.digicert.com/ssl/</a></em></strong></p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>我查了很久，解决方案也很简单。<br>只需要在链接数据库的URL中添加一句useSSL=false。当然值为false是指不需要建立安全的链接。相反为Ture就是安全的链接。按照自己的需求选择都可以。</p><p>比如我在Spring JDBC中的URL链接</p><blockquote><p>property name=”url” value=”jdbc:mysql://127.0.0.1:3306/spring?characterEncoding=utf8&amp;useSSL=false”</p></blockquote><p>我看了很多博客都是这么写的，<strong>但是我这么用还是会报错</strong></p><p>报错信息如下：</p><blockquote><p>Exception in thread “main” org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 17 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 17; columnNumber: 102; 对实体 “useSSL” 的引用必须以 ‘;’ 分隔符结尾。</p></blockquote><p>对于这个错误我无从下手。直到我看到一个博主说在XML文件中，有许多字符是被禁止的，’&amp;’就是一个。<strong>解决办法就是在’&amp;’后面加上”amp;”这里注意有’;’号</strong>。</p><p>希望对大家所有帮助</p><p>参考链接<a href="https://blog.csdn.net/hqbootstrap1/article/details/84564564" target="_blank" rel="noopener">https://blog.csdn.net/hqbootstrap1/article/details/84564564</a><br>参考链接<a href="http://www.cnblogs.com/caizhen/p/7679116.html" target="_blank" rel="noopener">http://www.cnblogs.com/caizhen/p/7679116.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的装配方式(2)-基于注释的装配</title>
      <link href="/2019/03/06/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F-2/"/>
      <url>/2019/03/06/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F-2/</url>
      
        <content type="html"><![CDATA[<p>在前面一节我们讲了基于XML配置文件的装配方式。<excerpt in index |首页摘要>尽管使用XML配置文件可以很简单地装配Bean，但如果应用中有大量的Bean需要配置，会导致XML文件过于庞大，不方便以后的维护和升级<a id="more"></a><the rest of contents>因此第二种基于注释的装配方式更受到开发者的热爱。在这节中我们也将走进基于注释的装配方式。</the></excerpt></p><h2 id="基于注释的装配"><a href="#基于注释的装配" class="headerlink" title="基于注释的装配"></a>基于注释的装配</h2><p>下面介绍几种常用的注解：</p><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>该注解是一个泛化的概念，仅仅表示一个组件对象，可以作用在任何层次上。</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><p>该注解将数据访问层(DAO)的类标识为Bean，即注解数据访问层Bean，功能和@Component相同</p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p>该注解用于标注一个业务逻辑组件类(Service层)。功能和@Component相同</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>该注解用于标注一个控制器组件类(Spring MVC的Controller)，功能和@Component相同</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>该注解从字面上理解就是：自动地进行装配。可以对成员变量，方法，以及构造方法进行标注，完成自动装配的工作。通过用@Autowired来消除setter和getter方法。默认安装Bean的类型进行装配。</p><p><strong>如果当Bean类型有多个实例的时候，该注释就要报错，抛出异常：</strong></p><blockquote><p>org.springframework.beans.factory.BeanCreationException</p></blockquote><p><strong><em>关于 @Autowired注释List和Map 详情参考链接<a href="https://blog.csdn.net/z69183787/article/details/78834547" target="_blank" rel="noopener">https://blog.csdn.net/z69183787/article/details/78834547</a></em></strong></p><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>该注解与@Autowired注释配合使用。之前我们说道，当Bean类型有多个实例的时候，使用@Autowired就会报错。所以当@Autowired注释需要按照名称来装配注入时和该注解一起使用。<br>实例名称由次注释的参数制定。举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired  </span><br><span class="line">@Qualifier(&quot;beanTestDao&quot;)  </span><br><span class="line">private BeanImpl beanImpl;</span><br></pre></td></tr></table></figure></p><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>该注解和@Autowired的功能一样，唯一的区别就是该注释默认是按照名称来装配注入的，只有当找不到与名称匹配的Bean才会按照类型来装配注入。<br>@Resource注解有两个属性 –name(按名称装配注入)和type(按类型装配注入)</p><hr><p><strong>虽然@Repository,@Service,@Controller三种注释的功能@Component注释相同，但是为了使类的标注更加层次化，在实际开发中推荐使用@Repository标注数据访问层、使用@Service标注业务逻辑层、使用@Controller标注控制层</strong></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>现在通过一个实例来说明上述的注释方法<br><strong>注：在Spring4.0以上的版本，配置注解指定包中的注释进行扫描前需要格外导入SpringAOP JAR包中的spring-aop-(版本号).RELEASE.jar</strong></p><hr><p>创建dao包，在该包下创建TestDao接口和TestDaoImpl实现类，实现类用@Repository注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package annotation.dao;</span><br><span class="line">public interface TestDao &#123;</span><br><span class="line">public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package annotation.dao;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line">@Repository(&quot;testDao&quot;)</span><br><span class="line">public class TestDaoImpl implements TestDao&#123;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>创建Service包，在该包下创建TestService接口和TestServiceImpl实现类，实现类用@Service注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package annotation.service;</span><br><span class="line">public interface TestService &#123;</span><br><span class="line">public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package annotation.service;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import annotation.dao.TestDao;</span><br><span class="line"></span><br><span class="line">@Service(&quot;testService&quot;)</span><br><span class="line">public class TestServiceImpl implements TestService&#123;</span><br><span class="line"></span><br><span class="line">@Resource(name=&quot;testDao&quot;)</span><br><span class="line">private TestDao testDao;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">testDao.save();</span><br><span class="line">System.out.println(&quot;testService save&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>创建controller包，在该包中创建TestController类，并用@Controller注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package annotation.controller;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import annotation.service.TestService;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private TestService testService;</span><br><span class="line"></span><br><span class="line">public void save()</span><br><span class="line">&#123;</span><br><span class="line">testService.save();</span><br><span class="line">System.out.println(&quot;testController save&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将之前创建的包全部放入同一个annotation包下，修改XMl配置文件，添加</p><blockquote><p>&lt;context:component-scan base-package=”annotation” /&gt;</p></blockquote><p><strong><em>具体XML文件的修改请参考[<a href="https://blog.csdn.net/qq_38801354/article/details/81271763]https://blog.csdn.net/qq_38801354/article/details/81271763]" target="_blank" rel="noopener">https://blog.csdn.net/qq_38801354/article/details/81271763]https://blog.csdn.net/qq_38801354/article/details/81271763]</a></em></strong></p><p>测试类通过构造方法实例化创建TestController对象，调用save方法。结果如下</p><blockquote><p>test save<br>testService save<br>testController save</p></blockquote><p>常用的注释方法到这里基本讲完了，Bean的装配方式也就此完结。希望对大家有所帮助</p><p><strong><em>参考书籍:  JavaEE框架整合开发入门到实践+SSM (清华大学出版社)</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的装配方式(1)-基于XML配置的装配</title>
      <link href="/2019/03/05/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/03/05/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Bean的装配可以理解为将Bean依赖注入到Spring容器中，Bean的装配方式即Bean依赖注入的方式。下面我们来理解一下基于XML配置的装配和基于注释的装配。本节主要讲解前者.</p><h2 id="基于XML配置的装配"><a href="#基于XML配置的装配" class="headerlink" title="基于XML配置的装配"></a>基于XML配置的装配</h2><p>spring提供了两种基于XML配置的装配方式。一是使用构造方式注入，另外一个就是属性setter方法注入</p><p>注意：<br><strong>使用构造方法注入方式装配Bean时，Bean的实现类必须要有带参数的构造函数。在配置文件中使用bean的子元素constructor-arg来定义构造函数的参数。</strong></p><p><strong>使用属性setter方法装配Bean时，Bean的实现类必须提供一个默认无参构造函数，并为需要的属性提供setter方法。需要使用bean的子元素property为每个属性注入值。</strong></p><hr><p>下面我们来通过一个实例来演示基于XML配置的装配方式</p><p>首先创建ComplexUser类，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package assemble;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class ComplexUser &#123;</span><br><span class="line">private String uname;</span><br><span class="line">private List&lt;String&gt; hobblyList;</span><br><span class="line">private Map&lt;String, String&gt; residenceMap;</span><br><span class="line">private Set&lt;String&gt; aliasSet;</span><br><span class="line">private String[] array;</span><br><span class="line">public void setUname(String uname) &#123;</span><br><span class="line">this.uname = uname;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobblyList(List&lt;String&gt; hobblyList) &#123;</span><br><span class="line">this.hobblyList = hobblyList;</span><br><span class="line">&#125;</span><br><span class="line">public void setResidenceMap(Map&lt;String, String&gt; residenceMap) &#123;</span><br><span class="line">this.residenceMap = residenceMap;</span><br><span class="line">&#125;</span><br><span class="line">public void setAliasSet(Set&lt;String&gt; aliasSet) &#123;</span><br><span class="line">this.aliasSet = aliasSet;</span><br><span class="line">&#125;</span><br><span class="line">public void setArray(String[] array) &#123;</span><br><span class="line">this.array = array;</span><br><span class="line">&#125;</span><br><span class="line">public ComplexUser() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line">public ComplexUser(String uname, List&lt;String&gt; hobblyList, Map&lt;String, String&gt; residenceMap, Set&lt;String&gt; aliasSet,</span><br><span class="line">String[] array) &#123;</span><br><span class="line">super();</span><br><span class="line">this.uname = uname;</span><br><span class="line">this.hobblyList = hobblyList;</span><br><span class="line">this.residenceMap = residenceMap;</span><br><span class="line">this.aliasSet = aliasSet;</span><br><span class="line">this.array = array;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;ComplexUser [uname=&quot; + uname + &quot;, hobblyList=&quot; + hobblyList + &quot;, residenceMap=&quot; + residenceMap</span><br><span class="line">+ &quot;, aliasSet=&quot; + aliasSet + &quot;, array=&quot; + Arrays.toString(array) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接下来创建ComplexUserContext.xml配置文件,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">                        </span><br><span class="line">     &lt;!-- 使用构造方法注入方法装配ComplexUser实例user1 --&gt;</span><br><span class="line">     &lt;bean id=&quot;user1&quot; class=&quot;assemble.ComplexUser&quot;&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;0&quot; value=&quot;chenheng1&quot;/&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;1&quot; &gt;</span><br><span class="line">     &lt;list&gt;</span><br><span class="line">     &lt;value&gt;唱歌&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;跳舞&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;爬山&lt;/value&gt;</span><br><span class="line">     &lt;/list&gt;</span><br><span class="line">     &lt;/constructor-arg&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;2&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;dalian&quot; value=&quot;大连&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;beijing&quot; value=&quot;北京&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;shanghai&quot; value=&quot;上海&quot;/&gt;   </span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;3&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;陈恒 100&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 101&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 102&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;4&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;看书&lt;/value&gt;</span><br><span class="line">&lt;value&gt;学习&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 使用属性的setter方式注入装配ComplexUser 实例user2 --&gt;</span><br><span class="line">&lt;bean id=&quot;user2&quot; class=&quot;assemble.ComplexUser&quot;&gt;</span><br><span class="line">&lt;property name=&quot;uname&quot; value=&quot;chenheng2&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;hobblyList&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;看书&lt;/value&gt;</span><br><span class="line">&lt;value&gt;学习spring&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;residenceMap&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;shenzhen&quot; value=&quot;深圳&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;guangzhou&quot; value=&quot;广州&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;tianjin&quot; value=&quot;天津&quot;/&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;aliasSet&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;陈恒 103&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 104&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 105&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;array&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;cccccc&lt;/value&gt;</span><br><span class="line">&lt;value&gt;dddddd&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><hr><p>最后创建TestComplexUser类来测试使用两种方法的输出结果。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import assemble.ComplexUser;</span><br><span class="line"></span><br><span class="line">public class TestAssemble &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO 自动生成的方法存根</span><br><span class="line">ApplicationContext applicationContext=new ClassPathXmlApplicationContext(&quot;ComplexUserContext.xml&quot;);</span><br><span class="line">ComplexUser user1=(ComplexUser)applicationContext.getBean(&quot;user1&quot;);</span><br><span class="line">ComplexUser user2=(ComplexUser)applicationContext.getBean(&quot;user2&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(user1);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果可想而知</p><blockquote><blockquote><p>ComplexUser<br>[uname=chenheng1, hobblyList=[唱歌, 跳舞, 爬山], residenceMap={dalian=大连, beijing=北京, shanghai=上海}, aliasSet=[陈恒 100, 陈恒 101, 陈恒 102], array=[看书, 学习]]<br>ComplexUser<br>[uname=chenheng2, hobblyList=[看书, 学习spring], residenceMap={shenzhen=深圳, guangzhou=广州, tianjin=天津}, aliasSet=[陈恒 103, 陈恒 104, 陈恒 105], array=[cccccc, dddddd]]</p></blockquote></blockquote><hr><p>就这样我们完成了第一种Bean的装配方式。希望对大家有所帮助。对于第二种装配方式我将放到下节详解。</p><p><strong><em>参考书籍:  JavaEE框架整合开发入门到实践+SSM (清华大学出版社)</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andriod Studio无法打开虚拟机</title>
      <link href="/2019/03/03/Andriod-Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/03/03/Andriod-Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们都知道使用andriod studio都必须要有手机模拟器或者链接手机，才能让程序跑起来。</p><p>今天我第一次Run的时候出现了一个很无语的错误，模拟器也没有打开。</p><p>报错如下：</p><blockquote><p>Emulator: [5984]:ERROR:android/android-emu/android/qt/qt_setup.cpp:<br>28:Qtlibrary not found at D:\AndroidSDK\emulator\lib64\qt\li </p></blockquote><blockquote><p>Emulator: Could not launch ‘D:\AndroidSDK\emulator/qemu/windows-x86_64/<br>qemu-system-i386.exe’: No such file or directory</p></blockquote><blockquote><p>Emulator: Process finished with exit code 2</p></blockquote><p>错误原因是一个emulator文件夹的丢失，我最初也看不懂这个错误，在网上查了好久，一直都是说emulator文件夹丢失。解决方案就是复制博主的文件夹，然后粘贴就行了，但是很难找到粘贴的位置。</p><p>不过我在一个博客上看到了另一个答案，就是进去SDK Manager下载就可以了，完全不用知道要在哪个文件夹下。</p><p>如图：<br><img src="/img/Andriod-Studio无法打开虚拟机_img/SDK_Manager.png" alt></p><p><strong><em>参考地址：<a href="https://blog.csdn.net/qq_38785971/article/details/82467174" target="_blank" rel="noopener">https://blog.csdn.net/qq_38785971/article/details/82467174</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Andriod Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNK2019问题</title>
      <link href="/2019/03/01/LNK2019%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/01/LNK2019%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index |首页摘要>今天在编译d3dx9的测试案例时被一个错误困扰了几个小时，说到底还是对vs编译器的不熟悉！<a id="more"></a><the rest of contents>对于这个问题在网上找了很久的错误，终于找到了令人满意的答案（因为该错误有点愚蠢，估计很少人会犯吧.</the></excerpt></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h3 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><p><img src="/img/LNK2019问题_img/Lnk2019_1.png" alt></p><p>WinMain函数是win32应用程序的入口点，而我创建的是窗口应用程序，却用着main入口函数。如果入口函数指定不当，就会报此错误</p><h3 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h3><p>同理如果选择的是win32控制台程序却用着winMain入口函数，则会报相同的lnk2019错误。<br><img src="/img/LNK2019问题_img/Lnk2019_2.png" alt></p><hr><p>那么如何修改呢（当然可以重新删除项目，创建相对应的项目，不过有一点麻烦咯）</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先进入项目属性，找到c/c++/预处理器，进入编辑定义。高亮部分由/分割<br>_CONSOLE和_WINDOWS。如图所示：<br><img src="/img/LNK2019问题_img/attribute_1.png" alt></p><p>前者是控制台程序用于MAIN入口函数，后者是窗体程序用于WINMAIN入口函数。选择其中一个就行。当然修改这一点还是不行的，还要修改子系统，如图对应修改就可以啦。</p><p><img src="/img/LNK2019问题_img/attribute_2.png" alt></p><p><strong><em>参考地址：<a href="https://blog.csdn.net/luoyayun361/article/details/84403579" target="_blank" rel="noopener">https://blog.csdn.net/luoyayun361/article/details/84403579</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My frist Blog</title>
      <link href="/2019/02/27/My-frist-Blog/"/>
      <url>/2019/02/27/My-frist-Blog/</url>
      
        <content type="html"><![CDATA[<p>大三的时候，在学习期间，总是会遇到一系列的问题。无论是编程的bug还是编译环境的error，有时候还会遇到编译器问题等。每个问题几乎都会让我花费大量的时间在网上找个答案。结果第二次遇到相同问题的时候,结果又花费大量的时间去网上找解决方案，实属困难。所以我想将我遇到的难以解决的问题与解决方案一起发布成博客！</p><h2 id="加油！"><a href="#加油！" class="headerlink" title="加油！"></a>加油！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
