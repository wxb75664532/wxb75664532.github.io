<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql报警告</title>
      <link href="/2019/03/10/Mysql%E6%8A%A5%E8%AD%A6%E5%91%8A/"/>
      <url>/2019/03/10/Mysql%E6%8A%A5%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>具体警告如下</strong>:</p><blockquote><p>Sun Mar 10 21:12:42 CST 2019 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</p></blockquote><p>产生此错误的原因是MySQL在高版本需要指明是否进行SSL连接<br>***对于什么是SSL，可以参考链接<a href="https://www.digicert.com/ssl/" target="_blank" rel="noopener">https://www.digicert.com/ssl/</a></p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>我查了很久，解决方案也很简单。<br>只需要在链接数据库的URL中添加一句useSSL=false。当然值为false是指不需要建立安全的链接。相反为Ture就是安全的链接。按照自己的需求选择都可以。</p><p>比如我在Spring JDBC中的URL链接</p><blockquote><property name="url" value="jdbc:mysql://127.0.0.1:3306/spring?characterEncoding=utf8&useSSL=false"></property></blockquote><p>我看了很多博客都是这么写的，<strong>但是我这么用还是会报错</strong></p><p>报错信息如下：</p><blockquote><p>Exception in thread “main” org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 17 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 17; columnNumber: 102; 对实体 “useSSL” 的引用必须以 ‘;’ 分隔符结尾。</p></blockquote><p>对于这个错误我无从下手。直到我看到一个博主说在XML文件中，有许多字符是被禁止的，’&amp;’就是一个。<strong>解决办法就是在’&amp;’后面加上”amp;”这里注意有’;’号</strong>。</p><p>希望对大家所有帮助</p><p>参考链接<a href="https://blog.csdn.net/hqbootstrap1/article/details/84564564" target="_blank" rel="noopener">https://blog.csdn.net/hqbootstrap1/article/details/84564564</a><br>参考链接<a href="http://www.cnblogs.com/caizhen/p/7679116.html" target="_blank" rel="noopener">http://www.cnblogs.com/caizhen/p/7679116.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的装配方式(2)-基于注释的装配</title>
      <link href="/2019/03/06/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F-2/"/>
      <url>/2019/03/06/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F-2/</url>
      
        <content type="html"><![CDATA[<p>在前面一节我们讲了基于XML配置文件的装配方式。<excerpt in index |首页摘要>尽管使用XML配置文件可以很简单地装配Bean，但如果应用中有大量的Bean需要配置，会导致XML文件过于庞大，不方便以后的维护和升级<a id="more"></a><the rest of contents>因此第二种基于注释的装配方式更受到开发者的热爱。在这节中我们也将走进基于注释的装配方式。</the></excerpt></p><h2 id="基于注释的装配"><a href="#基于注释的装配" class="headerlink" title="基于注释的装配"></a>基于注释的装配</h2><p>下面介绍几种常用的注解：</p><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>该注解是一个泛化的概念，仅仅表示一个组件对象，可以作用在任何层次上。</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><p>该注解将数据访问层(DAO)的类标识为Bean，即注解数据访问层Bean，功能和@Component相同</p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p>该注解用于标注一个业务逻辑组件类(Service层)。功能和@Component相同</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>该注解用于标注一个控制器组件类(Spring MVC的Controller)，功能和@Component相同</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>该注解从字面上理解就是：自动地进行装配。可以对成员变量，方法，以及构造方法进行标注，完成自动装配的工作。通过用@Autowired来消除setter和getter方法。默认安装Bean的类型进行装配。</p><p><strong>如果当Bean类型有多个实例的时候，该注释就要报错，抛出异常：</strong></p><blockquote><p>org.springframework.beans.factory.BeanCreationException</p></blockquote><p><strong><em>关于 @Autowired注释List和Map 详情参考链接<a href="https://blog.csdn.net/z69183787/article/details/78834547" target="_blank" rel="noopener">https://blog.csdn.net/z69183787/article/details/78834547</a></em></strong></p><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>该注解与@Autowired注释配合使用。之前我们说道，当Bean类型有多个实例的时候，使用@Autowired就会报错。所以当@Autowired注释需要按照名称来装配注入时和该注解一起使用。<br>实例名称由次注释的参数制定。举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired  </span><br><span class="line">@Qualifier(&quot;beanTestDao&quot;)  </span><br><span class="line">private BeanImpl beanImpl;</span><br></pre></td></tr></table></figure></p><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>该注解和@Autowired的功能一样，唯一的区别就是该注释默认是按照名称来装配注入的，只有当找不到与名称匹配的Bean才会按照类型来装配注入。<br>@Resource注解有两个属性 –name(按名称装配注入)和type(按类型装配注入)</p><hr><p><strong>虽然@Repository,@Service,@Controller三种注释的功能@Component注释相同，但是为了使类的标注更加层次化，在实际开发中推荐使用@Repository标注数据访问层、使用@Service标注业务逻辑层、使用@Controller标注控制层</strong></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>现在通过一个实例来说明上述的注释方法<br><strong>注：在Spring4.0以上的版本，配置注解指定包中的注释进行扫描前需要格外导入SpringAOP JAR包中的spring-aop-(版本号).RELEASE.jar</strong></p><hr><p>创建dao包，在该包下创建TestDao接口和TestDaoImpl实现类，实现类用@Repository注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package annotation.dao;</span><br><span class="line">public interface TestDao &#123;</span><br><span class="line">public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package annotation.dao;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line">@Repository(&quot;testDao&quot;)</span><br><span class="line">public class TestDaoImpl implements TestDao&#123;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>创建Service包，在该包下创建TestService接口和TestServiceImpl实现类，实现类用@Service注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package annotation.service;</span><br><span class="line">public interface TestService &#123;</span><br><span class="line">public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package annotation.service;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import annotation.dao.TestDao;</span><br><span class="line"></span><br><span class="line">@Service(&quot;testService&quot;)</span><br><span class="line">public class TestServiceImpl implements TestService&#123;</span><br><span class="line"></span><br><span class="line">@Resource(name=&quot;testDao&quot;)</span><br><span class="line">private TestDao testDao;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">testDao.save();</span><br><span class="line">System.out.println(&quot;testService save&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>创建controller包，在该包中创建TestController类，并用@Controller注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package annotation.controller;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import annotation.service.TestService;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private TestService testService;</span><br><span class="line"></span><br><span class="line">public void save()</span><br><span class="line">&#123;</span><br><span class="line">testService.save();</span><br><span class="line">System.out.println(&quot;testController save&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将之前创建的包全部放入同一个annotation包下，修改XMl配置文件，添加</p><blockquote><p>&lt;context:component-scan base-package=”annotation” /&gt;</p></blockquote><p><strong><em>具体XML文件的修改请参考[<a href="https://blog.csdn.net/qq_38801354/article/details/81271763]https://blog.csdn.net/qq_38801354/article/details/81271763" target="_blank" rel="noopener">https://blog.csdn.net/qq_38801354/article/details/81271763]https://blog.csdn.net/qq_38801354/article/details/81271763</a></em></strong></p><hr><p>测试类通过构造方法实例化创建TestController对象，调用save方法。结果如下</p><blockquote><p>test save<br>testService save<br>testController save</p></blockquote><p>常用的注释方法到这里基本讲完了，Bean的装配方式也就此完结。希望对大家有所帮助</p><p><strong><em>参考书籍:  JavaEE框架整合开发入门到实践+SSM (清华大学出版社)</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的装配方式(1)-基于XML配置的装配</title>
      <link href="/2019/03/05/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/03/05/Bean%E7%9A%84%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Bean的装配可以理解为将Bean依赖注入到Spring容器中，Bean的装配方式即Bean依赖注入的方式。下面我们来理解一下基于XML配置的装配和基于注释的装配。本节主要讲解前者.</p><h2 id="基于XML配置的装配"><a href="#基于XML配置的装配" class="headerlink" title="基于XML配置的装配"></a>基于XML配置的装配</h2><p>spring提供了两种基于XML配置的装配方式。一是使用构造方式注入，另外一个就是属性setter方法注入</p><p>注意：<br><strong>使用构造方法注入方式装配Bean时，Bean的实现类必须要有带参数的构造函数。在配置文件中使用bean的子元素constructor-arg来定义构造函数的参数。</strong></p><p><strong>使用属性setter方法装配Bean时，Bean的实现类必须提供一个默认无参构造函数，并为需要的属性提供setter方法。需要使用bean的子元素property为每个属性注入值。</strong></p><hr><p>下面我们来通过一个实例来演示基于XML配置的装配方式</p><p>首先创建ComplexUser类，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package assemble;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class ComplexUser &#123;</span><br><span class="line">private String uname;</span><br><span class="line">private List&lt;String&gt; hobblyList;</span><br><span class="line">private Map&lt;String, String&gt; residenceMap;</span><br><span class="line">private Set&lt;String&gt; aliasSet;</span><br><span class="line">private String[] array;</span><br><span class="line">public void setUname(String uname) &#123;</span><br><span class="line">this.uname = uname;</span><br><span class="line">&#125;</span><br><span class="line">public void setHobblyList(List&lt;String&gt; hobblyList) &#123;</span><br><span class="line">this.hobblyList = hobblyList;</span><br><span class="line">&#125;</span><br><span class="line">public void setResidenceMap(Map&lt;String, String&gt; residenceMap) &#123;</span><br><span class="line">this.residenceMap = residenceMap;</span><br><span class="line">&#125;</span><br><span class="line">public void setAliasSet(Set&lt;String&gt; aliasSet) &#123;</span><br><span class="line">this.aliasSet = aliasSet;</span><br><span class="line">&#125;</span><br><span class="line">public void setArray(String[] array) &#123;</span><br><span class="line">this.array = array;</span><br><span class="line">&#125;</span><br><span class="line">public ComplexUser() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line">public ComplexUser(String uname, List&lt;String&gt; hobblyList, Map&lt;String, String&gt; residenceMap, Set&lt;String&gt; aliasSet,</span><br><span class="line">String[] array) &#123;</span><br><span class="line">super();</span><br><span class="line">this.uname = uname;</span><br><span class="line">this.hobblyList = hobblyList;</span><br><span class="line">this.residenceMap = residenceMap;</span><br><span class="line">this.aliasSet = aliasSet;</span><br><span class="line">this.array = array;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;ComplexUser [uname=&quot; + uname + &quot;, hobblyList=&quot; + hobblyList + &quot;, residenceMap=&quot; + residenceMap</span><br><span class="line">+ &quot;, aliasSet=&quot; + aliasSet + &quot;, array=&quot; + Arrays.toString(array) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接下来创建ComplexUserContext.xml配置文件,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">                        </span><br><span class="line">     &lt;!-- 使用构造方法注入方法装配ComplexUser实例user1 --&gt;</span><br><span class="line">     &lt;bean id=&quot;user1&quot; class=&quot;assemble.ComplexUser&quot;&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;0&quot; value=&quot;chenheng1&quot;/&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;1&quot; &gt;</span><br><span class="line">     &lt;list&gt;</span><br><span class="line">     &lt;value&gt;唱歌&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;跳舞&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;爬山&lt;/value&gt;</span><br><span class="line">     &lt;/list&gt;</span><br><span class="line">     &lt;/constructor-arg&gt;</span><br><span class="line">     &lt;constructor-arg index=&quot;2&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;dalian&quot; value=&quot;大连&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;beijing&quot; value=&quot;北京&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;shanghai&quot; value=&quot;上海&quot;/&gt;   </span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;3&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;陈恒 100&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 101&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 102&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;4&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;看书&lt;/value&gt;</span><br><span class="line">&lt;value&gt;学习&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 使用属性的setter方式注入装配ComplexUser 实例user2 --&gt;</span><br><span class="line">&lt;bean id=&quot;user2&quot; class=&quot;assemble.ComplexUser&quot;&gt;</span><br><span class="line">&lt;property name=&quot;uname&quot; value=&quot;chenheng2&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;hobblyList&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;看书&lt;/value&gt;</span><br><span class="line">&lt;value&gt;学习spring&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;residenceMap&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;shenzhen&quot; value=&quot;深圳&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;guangzhou&quot; value=&quot;广州&quot;/&gt;</span><br><span class="line">&lt;entry key=&quot;tianjin&quot; value=&quot;天津&quot;/&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;aliasSet&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;陈恒 103&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 104&lt;/value&gt;</span><br><span class="line">&lt;value&gt;陈恒 105&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;array&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;cccccc&lt;/value&gt;</span><br><span class="line">&lt;value&gt;dddddd&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><hr><p>最后创建TestComplexUser类来测试使用两种方法的输出结果。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import assemble.ComplexUser;</span><br><span class="line"></span><br><span class="line">public class TestAssemble &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO 自动生成的方法存根</span><br><span class="line">ApplicationContext applicationContext=new ClassPathXmlApplicationContext(&quot;ComplexUserContext.xml&quot;);</span><br><span class="line">ComplexUser user1=(ComplexUser)applicationContext.getBean(&quot;user1&quot;);</span><br><span class="line">ComplexUser user2=(ComplexUser)applicationContext.getBean(&quot;user2&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(user1);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果可想而知</p><blockquote><blockquote><p>ComplexUser<br>[uname=chenheng1, hobblyList=[唱歌, 跳舞, 爬山], residenceMap={dalian=大连, beijing=北京, shanghai=上海}, aliasSet=[陈恒 100, 陈恒 101, 陈恒 102], array=[看书, 学习]]<br>ComplexUser<br>[uname=chenheng2, hobblyList=[看书, 学习spring], residenceMap={shenzhen=深圳, guangzhou=广州, tianjin=天津}, aliasSet=[陈恒 103, 陈恒 104, 陈恒 105], array=[cccccc, dddddd]]</p></blockquote></blockquote><hr><p>就这样我们完成了第一种Bean的装配方式。希望对大家有所帮助。对于第二种装配方式我将放到下节详解。</p><p><strong><em>参考书籍:  JavaEE框架整合开发入门到实践+SSM (清华大学出版社)</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andriod Studio无法打开虚拟机</title>
      <link href="/2019/03/03/Andriod-Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/03/03/Andriod-Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们都知道使用andriod studio都必须要有手机模拟器或者链接手机，才能让程序跑起来。</p><p>今天我第一次Run的时候出现了一个很无语的错误，模拟器也没有打开。</p><p>报错如下：</p><blockquote><p>Emulator: [5984]:ERROR:android/android-emu/android/qt/qt_setup.cpp:<br>28:Qtlibrary not found at D:\AndroidSDK\emulator\lib64\qt\li </p></blockquote><blockquote><p>Emulator: Could not launch ‘D:\AndroidSDK\emulator/qemu/windows-x86_64/<br>qemu-system-i386.exe’: No such file or directory</p></blockquote><blockquote><p>Emulator: Process finished with exit code 2</p></blockquote><p>错误原因是一个emulator文件夹的丢失，我最初也看不懂这个错误，在网上查了好久，一直都是说emulator文件夹丢失。解决方案就是复制博主的文件夹，然后粘贴就行了，但是很难找到粘贴的位置。</p><p>不过我在一个博客上看到了另一个答案，就是进去SDK Manager下载就可以了，完全不用知道要在哪个文件夹下。</p><p>如图：<br><img src="/img/Andriod-Studio无法打开虚拟机_img/SDK_Manager.png" alt></p><p><strong><em>参考地址：<a href="https://blog.csdn.net/qq_38785971/article/details/82467174" target="_blank" rel="noopener">https://blog.csdn.net/qq_38785971/article/details/82467174</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Andriod Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNK2019问题</title>
      <link href="/2019/03/01/LNK2019%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/01/LNK2019%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index |首页摘要>今天在编译d3dx9的测试案例时被一个错误困扰了几个小时，说到底还是对vs编译器的不熟悉！<a id="more"></a><the rest of contents>对于这个问题在网上找了很久的错误，终于找到了令人满意的答案（因为该错误有点愚蠢，估计很少人会犯吧.</the></excerpt></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h3 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><p><img src="/img/LNK2019问题_img/Lnk2019_1.png" alt></p><p>WinMain函数是win32应用程序的入口点，而我创建的是窗口应用程序，却用着main入口函数。如果入口函数指定不当，就会报此错误</p><h3 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h3><p>同理如果选择的是win32控制台程序却用着winMain入口函数，则会报相同的lnk2019错误。<br><img src="/img/LNK2019问题_img/Lnk2019_2.png" alt></p><hr><p>那么如何修改呢（当然可以重新删除项目，创建相对应的项目，不过有一点麻烦咯）</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先进入项目属性，找到c/c++/预处理器，进入编辑定义。高亮部分由/分割<br>_CONSOLE和_WINDOWS。如图所示：<br><img src="/img/LNK2019问题_img/attribute_1.png" alt></p><p>前者是控制台程序用于MAIN入口函数，后者是窗体程序用于WINMAIN入口函数。选择其中一个就行。当然修改这一点还是不行的，还要修改子系统，如图对应修改就可以啦。</p><p><img src="/img/LNK2019问题_img/attribute_2.png" alt></p><p><strong><em>参考地址：<a href="https://blog.csdn.net/luoyayun361/article/details/84403579" target="_blank" rel="noopener">https://blog.csdn.net/luoyayun361/article/details/84403579</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My frist Blog</title>
      <link href="/2019/02/27/My-frist-Blog/"/>
      <url>/2019/02/27/My-frist-Blog/</url>
      
        <content type="html"><![CDATA[<p>大三的时候，在学习期间，总是会遇到一系列的问题。无论是编程的bug还是编译环境的error，有时候还会遇到编译器问题等。每个问题几乎都会让我花费大量的时间在网上找个答案。结果第二次遇到相同问题的时候,结果又花费大量的时间去网上找解决方案，实属困难。所以我想将我遇到的难以解决的问题与解决方案一起发布成博客！</p><h2 id="加油！"><a href="#加油！" class="headerlink" title="加油！"></a>加油！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
